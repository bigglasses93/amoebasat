#include "amoebasat.h"
void update_L(one_bit_t L[N_VARIABLE+1][2], largeX_t LargeX[N_VARIABLE+1][2]){
	//Check INTRA rules of all units
	for(int i=1;i<=N_VARIABLE;i++){
		L[i][0]=LargeX[i][1]>0;L[i][1]=LargeX[i][0]>0;
	}
	//Check INTER & COLLAPSE rules of all units
	L[2][0] = L[2][0] | ((LargeX[3][1]>0)&(LargeX[1][0]>0));
	L[3][1] = L[3][1] | ((LargeX[2][0]>0)&(LargeX[1][0]>0));
	L[1][0] = L[1][0] | ((LargeX[2][0]>0)&(LargeX[3][1]>0));
	L[2][1] = L[2][1] & !((LargeX[3][1]>0)&(LargeX[1][0]>0));
	L[3][0] = L[3][0] & !((LargeX[2][0]>0)&(LargeX[1][0]>0));
	L[1][1] = L[1][1] & !((LargeX[2][0]>0)&(LargeX[3][1]>0));
	L[3][0] = L[3][0] | ((LargeX[4][1]>0)&(LargeX[2][1]>0));
	L[4][1] = L[4][1] | ((LargeX[3][0]>0)&(LargeX[2][1]>0));
	L[2][1] = L[2][1] | ((LargeX[3][0]>0)&(LargeX[4][1]>0));
	L[3][1] = L[3][1] & !((LargeX[4][1]>0)&(LargeX[2][1]>0));
	L[4][0] = L[4][0] & !((LargeX[3][0]>0)&(LargeX[2][1]>0));
	L[2][0] = L[2][0] & !((LargeX[3][0]>0)&(LargeX[4][1]>0));
	L[3][0] = L[3][0] | ((LargeX[4][1]>0)&(LargeX[2][0]>0));
	L[4][1] = L[4][1] | ((LargeX[3][0]>0)&(LargeX[2][0]>0));
	L[2][0] = L[2][0] | ((LargeX[3][0]>0)&(LargeX[4][1]>0));
	L[3][1] = L[3][1] & !((LargeX[4][1]>0)&(LargeX[2][0]>0));
	L[4][0] = L[4][0] & !((LargeX[3][0]>0)&(LargeX[2][0]>0));
	L[2][1] = L[2][1] & !((LargeX[3][0]>0)&(LargeX[4][1]>0));
	L[4][0] = L[4][0] | ((LargeX[1][1]>0)&(LargeX[3][1]>0));
	L[1][1] = L[1][1] | ((LargeX[4][0]>0)&(LargeX[3][1]>0));
	L[3][1] = L[3][1] | ((LargeX[4][0]>0)&(LargeX[1][1]>0));
	L[4][1] = L[4][1] & !((LargeX[1][1]>0)&(LargeX[3][1]>0));
	L[1][0] = L[1][0] & !((LargeX[4][0]>0)&(LargeX[3][1]>0));
	L[3][0] = L[3][0] & !((LargeX[4][0]>0)&(LargeX[1][1]>0));
	L[4][0] = L[4][0] | ((LargeX[1][1]>0)&(LargeX[3][0]>0));
	L[1][1] = L[1][1] | ((LargeX[4][0]>0)&(LargeX[3][0]>0));
	L[3][0] = L[3][0] | ((LargeX[4][0]>0)&(LargeX[1][1]>0));
	L[4][1] = L[4][1] & !((LargeX[1][1]>0)&(LargeX[3][0]>0));
	L[1][0] = L[1][0] & !((LargeX[4][0]>0)&(LargeX[3][0]>0));
	L[3][1] = L[3][1] & !((LargeX[4][0]>0)&(LargeX[1][1]>0));
	L[1][0] = L[1][0] | ((LargeX[2][1]>0)&(LargeX[4][1]>0));
	L[2][1] = L[2][1] | ((LargeX[1][0]>0)&(LargeX[4][1]>0));
	L[4][1] = L[4][1] | ((LargeX[1][0]>0)&(LargeX[2][1]>0));
	L[1][1] = L[1][1] & !((LargeX[2][1]>0)&(LargeX[4][1]>0));
	L[2][0] = L[2][0] & !((LargeX[1][0]>0)&(LargeX[4][1]>0));
	L[4][0] = L[4][0] & !((LargeX[1][0]>0)&(LargeX[2][1]>0));
	L[1][0] = L[1][0] | ((LargeX[2][1]>0)&(LargeX[4][0]>0));
	L[2][1] = L[2][1] | ((LargeX[1][0]>0)&(LargeX[4][0]>0));
	L[4][0] = L[4][0] | ((LargeX[1][0]>0)&(LargeX[2][1]>0));
	L[1][1] = L[1][1] & !((LargeX[2][1]>0)&(LargeX[4][0]>0));
	L[2][0] = L[2][0] & !((LargeX[1][0]>0)&(LargeX[4][0]>0));
	L[4][1] = L[4][1] & !((LargeX[1][0]>0)&(LargeX[2][1]>0));
	L[2][0] = L[2][0] | ((LargeX[3][1]>0)&(LargeX[1][1]>0));
	L[3][1] = L[3][1] | ((LargeX[2][0]>0)&(LargeX[1][1]>0));
	L[1][1] = L[1][1] | ((LargeX[2][0]>0)&(LargeX[3][1]>0));
	L[2][1] = L[2][1] & !((LargeX[3][1]>0)&(LargeX[1][1]>0));
	L[3][0] = L[3][0] & !((LargeX[2][0]>0)&(LargeX[1][1]>0));
	L[1][0] = L[1][0] & !((LargeX[2][0]>0)&(LargeX[3][1]>0));
	L[2][0] = L[2][0] | ((LargeX[3][0]>0)&(LargeX[1][0]>0));
	L[3][0] = L[3][0] | ((LargeX[2][0]>0)&(LargeX[1][0]>0));
	L[1][0] = L[1][0] | ((LargeX[2][0]>0)&(LargeX[3][0]>0));
	L[2][1] = L[2][1] & !((LargeX[3][0]>0)&(LargeX[1][0]>0));
	L[3][1] = L[3][1] & !((LargeX[2][0]>0)&(LargeX[1][0]>0));
	L[1][1] = L[1][1] & !((LargeX[2][0]>0)&(LargeX[3][0]>0));
	//Check CONTRA rules of all units
	one_bit_t contra0 = (LargeX[2][0]>0)&(LargeX[3][1]>0)&(LargeX[3][1]>0)&(LargeX[4][0]>0);
	L[4][0] = L[4][0] | contra0;
	L[2][0] = L[2][0] | contra0;
	L[3][1] = L[3][1] | contra0;
	L[3][1] = L[3][1] | contra0;
	one_bit_t contra1 = (LargeX[2][0]>0)&(LargeX[3][1]>0)&(LargeX[2][0]>0)&(LargeX[3][1]>0);
	L[3][1] = L[3][1] | contra1;
	L[2][0] = L[2][0] | contra1;
	L[3][1] = L[3][1] | contra1;
	L[2][0] = L[2][0] | contra1;
	one_bit_t contra2 = (LargeX[4][0]>0)&(LargeX[2][1]>0)&(LargeX[3][1]>0)&(LargeX[4][0]>0);
	L[4][0] = L[4][0] | contra2;
	L[4][0] = L[4][0] | contra2;
	L[2][1] = L[2][1] | contra2;
	L[3][1] = L[3][1] | contra2;
	one_bit_t contra3 = (LargeX[4][0]>0)&(LargeX[2][1]>0)&(LargeX[3][0]>0)&(LargeX[4][0]>0);
	L[4][0] = L[4][0] | contra3;
	L[4][0] = L[4][0] | contra3;
	L[2][1] = L[2][1] | contra3;
	L[3][0] = L[3][0] | contra3;
	one_bit_t contra4 = (LargeX[2][0]>0)&(LargeX[3][0]>0)&(LargeX[3][0]>0)&(LargeX[4][0]>0);
	L[4][0] = L[4][0] | contra4;
	L[2][0] = L[2][0] | contra4;
	L[3][0] = L[3][0] | contra4;
	L[3][0] = L[3][0] | contra4;
	one_bit_t contra5 = (LargeX[1][0]>0)&(LargeX[3][1]>0)&(LargeX[4][1]>0)&(LargeX[1][0]>0);
	L[1][0] = L[1][0] | contra5;
	L[1][0] = L[1][0] | contra5;
	L[3][1] = L[3][1] | contra5;
	L[4][1] = L[4][1] | contra5;
	one_bit_t contra6 = (LargeX[1][0]>0)&(LargeX[3][1]>0)&(LargeX[4][0]>0)&(LargeX[1][0]>0);
	L[1][0] = L[1][0] | contra6;
	L[1][0] = L[1][0] | contra6;
	L[3][1] = L[3][1] | contra6;
	L[4][0] = L[4][0] | contra6;
	one_bit_t contra7 = (LargeX[3][0]>0)&(LargeX[4][1]>0)&(LargeX[3][0]>0)&(LargeX[4][1]>0);
	L[4][1] = L[4][1] | contra7;
	L[3][0] = L[3][0] | contra7;
	L[4][1] = L[4][1] | contra7;
	L[3][0] = L[3][0] | contra7;
	one_bit_t contra8 = (LargeX[3][0]>0)&(LargeX[4][1]>0)&(LargeX[4][1]>0)&(LargeX[1][0]>0);
	L[1][0] = L[1][0] | contra8;
	L[3][0] = L[3][0] | contra8;
	L[4][1] = L[4][1] | contra8;
	L[4][1] = L[4][1] | contra8;
	one_bit_t contra9 = (LargeX[1][0]>0)&(LargeX[3][0]>0)&(LargeX[3][0]>0)&(LargeX[4][1]>0);
	L[4][1] = L[4][1] | contra9;
	L[1][0] = L[1][0] | contra9;
	L[3][0] = L[3][0] | contra9;
	L[3][0] = L[3][0] | contra9;
	one_bit_t contra10 = (LargeX[1][0]>0)&(LargeX[3][0]>0)&(LargeX[4][1]>0)&(LargeX[1][0]>0);
	L[1][0] = L[1][0] | contra10;
	L[1][0] = L[1][0] | contra10;
	L[3][0] = L[3][0] | contra10;
	L[4][1] = L[4][1] | contra10;
	one_bit_t contra11 = (LargeX[1][0]>0)&(LargeX[3][0]>0)&(LargeX[4][0]>0)&(LargeX[1][0]>0);
	L[1][0] = L[1][0] | contra11;
	L[1][0] = L[1][0] | contra11;
	L[3][0] = L[3][0] | contra11;
	L[4][0] = L[4][0] | contra11;
	one_bit_t contra12 = (LargeX[2][0]>0)&(LargeX[4][1]>0)&(LargeX[1][0]>0)&(LargeX[2][0]>0);
	L[2][0] = L[2][0] | contra12;
	L[2][0] = L[2][0] | contra12;
	L[4][1] = L[4][1] | contra12;
	L[1][0] = L[1][0] | contra12;
	one_bit_t contra13 = (LargeX[2][0]>0)&(LargeX[4][1]>0)&(LargeX[1][1]>0)&(LargeX[2][0]>0);
	L[2][0] = L[2][0] | contra13;
	L[2][0] = L[2][0] | contra13;
	L[4][1] = L[4][1] | contra13;
	L[1][1] = L[1][1] | contra13;
	one_bit_t contra14 = (LargeX[4][0]>0)&(LargeX[1][1]>0)&(LargeX[4][0]>0)&(LargeX[1][1]>0);
	L[1][1] = L[1][1] | contra14;
	L[4][0] = L[4][0] | contra14;
	L[1][1] = L[1][1] | contra14;
	L[4][0] = L[4][0] | contra14;
	one_bit_t contra15 = (LargeX[4][0]>0)&(LargeX[1][1]>0)&(LargeX[1][1]>0)&(LargeX[2][0]>0);
	L[2][0] = L[2][0] | contra15;
	L[4][0] = L[4][0] | contra15;
	L[1][1] = L[1][1] | contra15;
	L[1][1] = L[1][1] | contra15;
	one_bit_t contra16 = (LargeX[1][0]>0)&(LargeX[2][0]>0)&(LargeX[1][0]>0)&(LargeX[2][0]>0);
	L[2][0] = L[2][0] | contra16;
	L[1][0] = L[1][0] | contra16;
	L[2][0] = L[2][0] | contra16;
	L[1][0] = L[1][0] | contra16;
	one_bit_t contra17 = (LargeX[3][0]>0)&(LargeX[1][1]>0)&(LargeX[2][1]>0)&(LargeX[3][0]>0);
	L[3][0] = L[3][0] | contra17;
	L[3][0] = L[3][0] | contra17;
	L[1][1] = L[1][1] | contra17;
	L[2][1] = L[2][1] | contra17;
	one_bit_t contra18 = (LargeX[3][0]>0)&(LargeX[1][1]>0)&(LargeX[2][0]>0)&(LargeX[3][0]>0);
	L[3][0] = L[3][0] | contra18;
	L[3][0] = L[3][0] | contra18;
	L[1][1] = L[1][1] | contra18;
	L[2][0] = L[2][0] | contra18;
	one_bit_t contra19 = (LargeX[1][0]>0)&(LargeX[2][1]>0)&(LargeX[2][1]>0)&(LargeX[3][0]>0);
	L[3][0] = L[3][0] | contra19;
	L[1][0] = L[1][0] | contra19;
	L[2][1] = L[2][1] | contra19;
	L[2][1] = L[2][1] | contra19;
	one_bit_t contra20 = (LargeX[1][0]>0)&(LargeX[2][1]>0)&(LargeX[1][0]>0)&(LargeX[2][1]>0);
	L[2][1] = L[2][1] | contra20;
	L[1][0] = L[1][0] | contra20;
	L[2][1] = L[2][1] | contra20;
	L[1][0] = L[1][0] | contra20;
}